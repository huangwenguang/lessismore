<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lessismore.commont.dao.AdminDao">

	<insert id="save" useGeneratedKeys="true" keyProperty="id" parameterType="com.lessismore.commont.model.Admin">
		INSERT INTO TB_ADMIN (
			ID, CREATE_TIME, EMAIL, LAST_LOGIN_TIME, NAME, PHONE, STATE, USER_NAME, USER_PWD
		) VALUES (
			#{id}, #{createTime}, #{email}, #{lastLoginTime}, #{name}, #{phone}, #{state}, #{userName}, #{userPwd}
		)
	</insert>

	<delete id="delete" parameterType="com.lessismore.commont.model.Admin">
		DELETE FROM TB_ADMIN <include refid="CriteriaSQL" />
	</delete>

	<update id="update" parameterType="com.lessismore.commont.model.Admin">
		UPDATE TB_ADMIN <include refid="SetSQL" /> <include refid="CriteriaSQL" />
	</update>
  
	<select id="selectCount" parameterType="com.lessismore.commont.model.Admin" resultType="_long">
		SELECT COUNT(1) FROM TB_ADMIN <include refid="CriteriaSQL" />
	</select>

	<select id="selectList" parameterType="com.lessismore.commont.model.Admin" resultMap="AdminResultMap">
		SELECT * FROM TB_ADMIN <include refid="CriteriaSQL" /> <include refid="OrderbySQL" /> <include refid="LimitSQL" />
	</select>

	<resultMap id="AdminResultMap" type="com.lessismore.commont.model.Admin">
		<id property="id" column="ID" />
		<result property="createTime" column="CREATE_TIME" />
		<result property="email" column="EMAIL" />
		<result property="lastLoginTime" column="LAST_LOGIN_TIME" />
		<result property="name" column="NAME" />
		<result property="phone" column="PHONE" />
		<result property="state" column="STATE" />
		<result property="userName" column="USER_NAME" />
		<result property="userPwd" column="USER_PWD" />
	</resultMap>

	<sql id="SetSQL">
		<set>
			<if test="entity.createTime != null">CREATE_TIME = #{entity.createTime},</if>
			<if test="entity.email != null">EMAIL = #{entity.email},</if>
			<if test="entity.lastLoginTime != null">LAST_LOGIN_TIME = #{entity.lastLoginTime},</if>
			<if test="entity.name != null">NAME = #{entity.name},</if>
			<if test="entity.phone != null">PHONE = #{entity.phone},</if>
			<if test="entity.state != null">STATE = #{entity.state},</if>
			<if test="entity.userName != null">USER_NAME = #{entity.userName},</if>
			<if test="entity.userPwd != null">USER_PWD = #{entity.userPwd},</if>
		</set>
	</sql>

	<sql id="CriteriaSQL">
		<where>
			<if test="criteria != null and criteria.notEmpty">
				<foreach collection="criteria.criterions" item="criterion">
					<choose>
						<when test="criterion.noValue">
							and ${criterion.field} ${criterion.condition}
						</when>
						<when test="criterion.singleValue">
							and ${criterion.field} ${criterion.condition} #{criterion.value}
						</when>
						<when test="criterion.betweenValue">
							and ${criterion.field} ${criterion.condition} #{criterion.value} and #{criterion.value2}
						</when>
						<when test="criterion.listValue">
							and ${criterion.field} ${criterion.condition}
							<foreach collection="criterion.value" item="item" open="(" separator="," close=")">
								#{item}
							</foreach>
						</when>
					</choose>
				</foreach>
			</if>
		</where>
	</sql>

	<sql id="OrderbySQL">
		<if test="criteria != null and criteria.orderly">
			ORDER BY 
			<foreach collection="criteria.orderbies" item="orderby" separator=",">
				${orderby.field} ${orderby.value}
			</foreach>
		</if>
	</sql>

	<sql id="LimitSQL">
		<if test="criteria != null and criteria.pagination">
			LIMIT #{criteria.limit.value}, #{criteria.limit.value2}
		</if>
	</sql>

</mapper>